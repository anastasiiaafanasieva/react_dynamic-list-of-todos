{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectUser","selectedUserId","useState","initialTodos","setInitialTodos","undefined","status","setStatus","appliedQuery","setAppliedQuery","useEffect","applyQuery","useCallback","f","delay","timerId","clearTimeout","args","setTimeout","debounce","randomizer","array","newArr","i","length","j","Math","floor","random","randomize","filteredTodos","filter","todo","title","includes","completed","className","type","placeholder","onChange","event","target","value","name","input","onClick","map","classNames","readOnly","userId","id","getData","url","fetch","then","response","json","getTodos","a","data","getSelectedUser","CurrentUser","clearUser","user","setUser","email","phone","App","setSelectedUserId","setTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.58f49c88.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  selectUser: CallableFunction;\n  selectedUserId: number;\n};\n\ntype FuncArg = (v: string) => void;\n\nconst debounce = (f: FuncArg, delay: number) => {\n  let timerId: number;\n\n  return (...args: string[]) => {\n    clearTimeout(timerId);\n    timerId = setTimeout(f, delay, ...args);\n  };\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectUser,\n  selectedUserId,\n}) => {\n  const [initialTodos, setInitialTodos] = useState<Todo[]>([]);\n  const [status, setStatus] = useState<boolean | undefined>(undefined);\n  const [appliedQuery, setAppliedQuery] = useState('');\n\n  useEffect(() => {\n    setInitialTodos(todos);\n  }, [todos]);\n\n  const applyQuery = useCallback(\n    debounce(setAppliedQuery, 500),\n    [],\n  );\n\n  const selectStatus = (input: string) => {\n    let inputStatus: boolean;\n\n    if (input !== 'all') {\n      if (input === 'active') {\n        inputStatus = false;\n      } else {\n        inputStatus = true;\n      }\n\n      setStatus(inputStatus);\n    } else {\n      setStatus(undefined);\n    }\n  };\n\n  const randomize = (array: Todo[]) => {\n    const newArr = [...array];\n\n    for (let i = newArr.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n\n      [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n    }\n\n    return newArr;\n  };\n\n  const randomizer = () => {\n    setInitialTodos(randomize(initialTodos));\n  };\n\n  let filteredTodos = initialTodos\n    .filter(todo => todo.title.includes(appliedQuery));\n\n  if (status !== undefined) {\n    filteredTodos = filteredTodos.filter(todo => todo.completed === status);\n  }\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__filters\">\n        <label>\n          <input\n            data-cy=\"filterByTitle\"\n            className=\"TodoList__input input\"\n            type=\"text\"\n            placeholder=\"Filter by title\"\n            onChange={(event) => {\n              applyQuery(event.target.value);\n            }}\n          />\n        </label>\n\n        <label>\n          <select\n            name=\"select\"\n            className=\"TodoList__input select\"\n            onChange={(event) => selectStatus(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </label>\n\n        <button\n          type=\"button\"\n          className=\"button TodoList__input\"\n          onClick={() => randomizer()}\n        >\n          Randomize\n        </button>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {filteredTodos.map(todo => (\n            <>\n              <li\n                className={classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--unchecked': !todo.completed },\n                  { 'TodoList__item--checked': todo.completed },\n                )}\n                key={todo.id}\n              >\n                <label>\n                  <input type=\"checkbox\" readOnly />\n                  <p>{todo.title}</p>\n                </label>\n                {todo.userId\n                  && (\n                    <button\n                      data-cy=\"userButton\"\n                      className={classNames(\n                        'TodoList__user-button button',\n                        {\n                          'TodoList__user-button--selected button':\n                            todo.userId === selectedUserId,\n                        },\n                      )}\n                      type=\"button\"\n                      onClick={\n                        () => {\n                          selectUser(todo.userId);\n                        }\n                      }\n                    >\n                      {`User ${todo.userId}`}\n                    </button>\n                  )}\n              </li>\n            </>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst getData = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => response.json());\n};\n\nexport const getTodos = async () => {\n  const data = await getData('/todos');\n\n  return data;\n};\n\nexport const getSelectedUser = async (id: number) => {\n  try {\n    const data = await getData(`/users/${id}`);\n\n    return data;\n  } catch (error) {\n    return null;\n  }\n};\n","import React, { useState, useEffect } from 'react';\nimport { getSelectedUser } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  selectedUserId: number;\n  clearUser: CallableFunction,\n};\n\nexport const CurrentUser: React.FC<Props> = ({ selectedUserId, clearUser }) => {\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    getSelectedUser(selectedUserId).then(data => setUser(data));\n  }, [selectedUserId]);\n\n  return (\n    <>\n      {user\n        ? (\n          <>\n            <div className=\"CurrentUser\">\n              <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${selectedUserId}`}</span></h2>\n\n              <h3\n                className=\"CurrentUser__name\"\n                data-cy=\"userName\"\n              >\n                {user?.name}\n              </h3>\n              <p className=\"CurrentUser__email\">{user?.email}</p>\n              <p className=\"CurrentUser__phone\">{user?.phone}</p>\n            </div>\n\n            <button\n              type=\"button\"\n              onClick={() => clearUser()}\n              className=\"CurrentUser__clear button\"\n            >\n              Clear\n            </button>\n          </>\n        )\n        : <h3>No user data</h3>}\n    </>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    getTodos().then(data => setTodos(data));\n  }, []);\n\n  const selectUserId = (id: number) => {\n    setSelectedUserId(id);\n  };\n\n  const clearUser = () => {\n    setSelectedUserId(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          selectUser={selectUserId}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              selectedUserId={selectedUserId}\n              clearUser={clearUser}\n            />\n          ) : <h3>No user selected</h3>}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}